@page "/Teams/Add"
@inject HttpClient http
@inject ISnackbar snackbar;
@inject IJSRuntime js

<MudCard Class="card-f" Style="width: 60%; margin-top:40px; margin: 10px auto; background-color:antiquewhite">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText style="text-align:center;" Typo="Typo.h6">Add new Team</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <EditForm Model="@teams" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 16px;">
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudSelect @ref="mudSelectSport" @bind-Value="teams.SportId" T="int" Label="Sport" Variant="Variant.Text">
                        @if (this.sports is not null)
                        {
                            @foreach (var item in sports)
                            {
                                <MudSelectItem Value="@item.SportId">@item.SportsName</MudSelectItem>
                            }
                        }
                        <MudSelectItem Value="0">Select one</MudSelectItem>
                    </MudSelect>
                </div>        
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Team Name" @bind-Value="teams.TeamName" For="@(() => teams.TeamName)" />
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Team Captain" @bind-Value="teams.Captain" For="@(() => teams.Captain)" />
                </div>              

                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Team Logo"
                                  @bind-Value="teams.TeamLogo" OnAdornmentClick="@OpenFilePicker" Adornment="Adornment.End" For="@(() => teams.TeamLogo)" AdornmentIcon="@Icons.Material.Filled.Image" />

                </div>
            </div>

            <div style="display: flex; justify-content: space-between; padding-top: 10px;">
                <MudButton Variant="Variant.Filled" Href="/teams" Color="Color.Dark">Back to</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
            </div>

        </EditForm>
    </MudCardContent>
</MudCard>
@* @JsonSerializer.Serialize(this.teams); *@
<InputFile style="display:none" @ref="uploadControl" OnChange="@((InputFileChangeEventArgs args) => OnInputFileChange(args))" />

@code {
    private Team teams = new Team();
    private InputFile? uploadControl;
    private IBrowserFile? file;

    private List<Sport>? sports;
    MudSelect<int> mudSelectSport = null!;

    protected override async Task OnInitializedAsync()
    {
        sports = await http.GetFromJsonAsync<List<Sport>>("api/Teams/Sports");
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        this.file = e.File;
        this.teams.TeamLogo = e.File.Name;

    }
    public async Task OpenFilePicker()
    {
        await js.InvokeAsync<object>("elClick", uploadControl?.Element);
    }
    private async void HandleValidSubmit(EditContext editContext)
    {
        var r = await UploadImage();
        this.teams.TeamLogo = r.ImageName;
        await this.Save();

    }

    public async Task<UploadResponse> UploadImage()
    {

        if (file is not null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));

            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(content: fileContent, name: "\"file\"", fileName: file.Name);
            var response = await http.PostAsync("api/Teams/Upload", content);
            var r = await response.Content.ReadFromJsonAsync<UploadResponse>();
            if (r is null) return new UploadResponse();
            else return r;
        }

        return new UploadResponse();
    }
    private async Task Save()
    {
        var response = await this.http.PostAsJsonAsync<Team>("/api/Teams", this.teams);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            this.teams = new Team();
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }



}