@page "/Player/Add"

@inject HttpClient http
@inject ISnackbar snackbar;
@inject IJSRuntime js

<MudCard Class="card-f" Style="width: 60%; margin-top:40px; margin: 10px auto; background-color:white">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText style="text-align:center;" Typo="Typo.h6">Add new Player</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <EditForm Model="@play" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div style="display: flex; flex-wrap: wrap; justify-content: space-between; margin-bottom: 16px;">
               <div style="width: 48%; margin-bottom: 16px;">
                    <MudSelect @ref="mudSelectTeam" @bind-Value="play.TeamId" T="int" Label="Team" Variant="Variant.Text">
                        @if (teams != null)
                        {
                            @foreach (var item in teams)
                            {
                                <MudSelectItem Value="@item.TeamId">@item.TeamName</MudSelectItem>
                            }
                        }
                        <MudSelectItem Value="0">Select one</MudSelectItem>
                    </MudSelect>
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudSelect @ref="mudSelectCategory" @bind-Value="play.CategoryId" T="int" Label="Category" Variant="Variant.Text">
                        @if (categories != null)
                        {
                            @foreach (var item in categories)
                            {
                                <MudSelectItem Value="@item.CategoryId">@item.CategoryName</MudSelectItem>
                            }
                        }
                        <MudSelectItem Value="0">Select one</MudSelectItem>
                    </MudSelect>
                </div>               
 
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Player Name" @bind-Value="play.PlayerName" For="@(() => play.PlayerName)" />
                </div>
                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Registration Number" @bind-Value="play.RegistrationNumber" For="@(() => play.RegistrationNumber)" />
                </div>

                <div style="width: 48%; margin-bottom: 16px;">
                    <MudDatePicker Label="Birth Date" @bind-Date="play.BirthDate" DateFormat="dd/MM/yyyy" For="@(() => play.BirthDate)" />
                </div>


                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Email" @bind-Value="play.Email" For="@(() => play.Email)" />
                </div>

                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Phone" @bind-Value="play.Phone" For="@(() => play.Phone)" />
                </div>

                <div style="width: 48%; margin-bottom: 16px;">
                    <MudTextField Label="Address" @bind-Value="play.Address" For="@(() => play.Address)" />
                </div>
                <div style="width: 99%; margin-bottom: 16px;">
                    <MudTextField Label="Picture" @bind-Value="play.Picture" OnAdornmentClick="@OpenFilePicker" Adornment="Adornment.End" For="@(() => play.Picture)" AdornmentIcon="@Icons.Material.Filled.Image" />

                </div>

            </div>

            <div style="display: flex; justify-content: space-between; padding-top: 10px;">
                <MudButton Variant="Variant.Filled" Href="/player" Color="Color.Dark">Back to</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
            </div>

        </EditForm>
    </MudCardContent>
</MudCard>
@* <div>@JsonSerializer.Serialize(this.play)</div> *@
<InputFile style="display:none" @ref="uploadControl" OnChange="@((InputFileChangeEventArgs args) => OnInputFileChange(args))" />

@code {
    private Player play = new Player();
    private InputFile? uploadControl;
    private IBrowserFile? file;

    //private Player play = new Player(); // Assuming Player is your model class

    // Your existing code for retrieving teams and categories...

    //private int selectedTeamId;
    //private int selectedCategoryId;
    //private List<Team> teams;
    //private List<Category> categories;

    //protected override async Task OnInitializedAsync()
    //{
    //    try
    //    {
    //        teams = await http.GetFromJsonAsync<List<Team>>("api/Players/Teams");
    //        categories = await http.GetFromJsonAsync<List<Category>>("api/Players/Categories");
    //    }
    //    catch (Exception ex)
    //    {
    //        // Handle exceptions or errors here
    //    }
    //}


    //private int play.TeamId { get; set; }
    //private int play.CategoryId { get; set; }
    //private List<Team> teams; // Replace 'Team' with your actual Team model
    //private List<Category> categories; // Replace 'Category' with your actual Category model

    //protected override async Task OnInitializedAsync()
    //{
    //    // Fetch teams and categories data here or assign them properly
    //    teams = await TeamService.GetTeamsAsync(); // Example of getting teams asynchronously
    //    categories = await CategoryService.GetCategoriesAsync(); // Example of getting categories asynchronously
    //}

    private List<Team>? teams;
    private List<Category>? categories;
    MudSelect<int> mudSelectTeam = null!;
    MudSelect<int> mudSelectCategory = null!;

    protected override async Task OnInitializedAsync()
    {
        teams = await http.GetFromJsonAsync<List<Team>>("api/Players/Teams");
        categories = await http.GetFromJsonAsync<List<Category>>("api/Players/Categories");
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        this.file = e.File;
        this.play.Picture = e.File.Name;

    }
    public async Task OpenFilePicker()
    {
        await js.InvokeAsync<object>("elClick", uploadControl?.Element);
    }
    private async void HandleValidSubmit(EditContext editContext)
    {
        var r = await UploadImage();
        this.play.Picture = r.ImageName;
        await this.Save();

    }
    public async Task<UploadResponse> UploadImage()
    {

        if (file is not null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));

            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(content: fileContent, name: "\"file\"", fileName: file.Name);
            var response = await http.PostAsync("api/Players/Upload", content);
            var r = await response.Content.ReadFromJsonAsync<UploadResponse>();
            if (r is null) return new UploadResponse();
            else return r;
        }

        return new UploadResponse();
    }
    private async Task Save()
    {
        var response = await this.http.PostAsJsonAsync<Player>("/api/Players", this.play);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            this.play = new Player();
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }



}