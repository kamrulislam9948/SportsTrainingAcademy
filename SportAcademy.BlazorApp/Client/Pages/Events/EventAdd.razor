@page "/Events/Add"
@inject HttpClient http
@inject ISnackbar snackbar;
@inject IJSRuntime js

<div class="card-f">
    <MudCard Style="background: white;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText style="text-align:center;" Typo="Typo.h6">Add new Event</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <EditForm Model="@events" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />

                <div class="form">
                    <div class="form-field">
                        <MudSelect @ref="mudSelectManager" @bind-Value="events.ManagerId" T="int" Variant="Variant.Text" Label="Manager">
                            @if (this.managers is not null)
                            {
                                @foreach (var item in managers)
                                {
                                    <MudSelectItem Value="@item.ManagerId">@item.ManagerName</MudSelectItem>
                                }
                            }
                            <MudSelectItem Value="0">Select one</MudSelectItem>
                        </MudSelect>
                    </div>
                    <div class="form-field">
                        <MudSelect @ref="mudSelectSelectionPanel" @bind-Value="events.SelectionPanelId" T="int" Label="Selection Panel" Variant="Variant.Text">
                            @if (this.selectionPanels is not null)
                            {
                                @foreach (var item in selectionPanels)
                                {
                                    <MudSelectItem Value="@item.SelectionPanelId">@item.SelectionPanelName</MudSelectItem>
                                }
                            }
                            <MudSelectItem Value="0">Select one</MudSelectItem>
                        </MudSelect>
                    </div>
                    <div class="form-field">
                        <MudTextField Variant="Variant.Text" Label="Event Name" @bind-Value="events.EventName" For="@(() => events.EventName)" />
                    </div>
                    <div class="form-field">
                        <MudTextField Variant="Variant.Text" Label="Picture"
                                      @bind-Value="events.Picture" OnAdornmentClick="@OpenFilePicker" Adornment="Adornment.End" For="@(() => events.Picture)" AdornmentIcon="@Icons.Material.Filled.Image" />

                    </div>
                    <div class="form-field">
                        <MudDatePicker Variant="Variant.Text" Label="Start Date" @bind-Date="events.StartDate" DateFormat="dd/MM/yyyy" For="@(() => events.StartDate)" />
                    </div>
                    <div class="form-field">
                        <MudDatePicker Variant="Variant.Text" Label="End Date" @bind-Date="events.EndDate" DateFormat="dd/MM/yyyy" For="@(() => events.EndDate)" />
                    </div>

                    <div class="form-field">
                        <MudTextField Variant="Variant.Text" Label="Description" @bind-Value="events.Description" For="@(() => events.Description)" />
                    </div>

                    <div class="form-field">
                        <MudTextField Variant="Variant.Text" Label="Location" @bind-Value="events.Location" For="@(() => events.Location)" />
                    </div>



                </div>

                <div style="display: flex; justify-content: space-between; padding-top: 10px;">
                    <MudButton Variant="Variant.Filled" Href="/event" Color="Color.Dark">Back to</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                </div>

            </EditForm>
        </MudCardContent>
    </MudCard>
</div>
@* @JsonSerializer.Serialize(this.events); *@
<InputFile style="display:none" @ref="uploadControl" OnChange="@((InputFileChangeEventArgs args) => OnInputFileChange(args))" />

@code {
    private Event events = new Event();
    private InputFile? uploadControl;
    private IBrowserFile? file;

    private List<Manager>? managers;
    private List<SelectionPanel>? selectionPanels;
    MudSelect<int> mudSelectManager = null!;
    MudSelect<int> mudSelectSelectionPanel = null!;

    protected override async Task OnInitializedAsync()
    {
        managers = await http.GetFromJsonAsync<List<Manager>>("api/Events/Managers");
        selectionPanels = await http.GetFromJsonAsync<List<SelectionPanel>>("api/Events/SelectionPanels");
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        this.file = e.File;
        this.events.Picture = e.File.Name;

    }
    public async Task OpenFilePicker()
    {
        await js.InvokeAsync<object>("elClick", uploadControl?.Element);
    }
    private async void HandleValidSubmit(EditContext editContext)
    {
        var r = await UploadImage();
        this.events.Picture = r.ImageName;
        await this.Save();

    }
 
    public async Task<UploadResponse> UploadImage()
    {

        if (file is not null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));

            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(content: fileContent, name: "\"file\"", fileName: file.Name);
            var response = await http.PostAsync("api/Events/Upload", content);
            var r = await response.Content.ReadFromJsonAsync<UploadResponse>();
            if (r is null) return new UploadResponse();
            else return r;
        }

        return new UploadResponse();
    }
    private async Task Save()
    {
        var response = await this.http.PostAsJsonAsync<Event>("/api/Events", this.events);
        if (response.IsSuccessStatusCode)
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Data saved.", Severity.Success);
            this.events = new Event();
            this.StateHasChanged();
        }
        else
        {
            this.snackbar.Clear();
            this.snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            this.snackbar.Add("Failed to save.", Severity.Warning);
        }
    }
}